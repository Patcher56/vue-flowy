{"version":3,"file":"FlowChart.js","sources":["../src/FlowElement.ts","../src/Renderer.ts","../src/FlowChart.ts"],"sourcesContent":["import { NodeOptions } from \"./Graph\"\n\nexport interface FlowElementEdgeOptions {\n  label?: string\n}\n\nexport interface FlowElementEdge {\n  otherId: string\n  options?: FlowElementEdgeOptions\n}\n\nexport interface FlowElementListener {\n  event: string\n  callback: () => void\n}\n\nexport const flowElementsById: Record<string, FlowElement> = {}\n\nexport class FlowElement {\n  id: string\n  options: NodeOptions\n  edges: FlowElementEdge[] = []\n  listeners: FlowElementListener[] = []\n\n  constructor(id: string, options?: NodeOptions) {\n    this.id = id\n    this.options = Object.assign({}, options)\n    this.register()\n  }\n\n  static getById(id: string) {\n    return flowElementsById[id]\n  }\n\n  leadsTo(destinationElement: FlowElement, options?: FlowElementEdgeOptions) {\n    this.edges.push({otherId: destinationElement.id, options})\n    return destinationElement\n  }\n\n  unregister() {\n    delete flowElementsById[this.id]\n  }\n\n  private register() {\n    if (flowElementsById[this.id]) {\n      throw new Error('ID ' + this.id + 'is already registered!')\n    }\n\n    flowElementsById[this.id] = this\n  }\n\n  on(event: string, callback: () => void) {\n    this.listeners.push({event, callback})\n  }\n}","import {select} from 'd3-selection'\nimport Graph from './Graph'\nimport {createNodes, positionNodes} from './render/nodes'\nimport layout from './layout'\n\nexport class Renderer<T extends string> {\n  graph: Graph<T>\n\n  constructor(graph: Graph<T>) {\n    this.graph = graph\n  }\n\n  preprocess() {\n    for (const id of this.graph.nodeIds) {\n      const node = this.graph.node(id)\n      console.log('TODO: do pre-processing.')\n    }\n  }\n\n  render(element: Element) {\n    const d3Element = select(element)\n\n    // delete everything from element\n    d3Element.selectAll().remove()\n\n    const nodes = createNodes(d3Element.append('g').attr('class', 'nodes'), this.graph)\n    layout(this.graph)\n    positionNodes(nodes, this.graph)\n  }\n\n  // createOrSelectGroup(root, name) {\n  //   let selection = root.select('g.' + name)\n  //   if (selection.empty()) {\n  //     selection = root.append('g').attr('class', name)\n  //   }\n  //   return selection\n  // }\n}\n","// import * as d3Renderer from 'dagre-d3-renderer'\n// import Graph from './Graph'\nimport {FlowElement, FlowElementEdgeOptions} from './FlowElement'\nimport {select} from 'd3-selection'\nimport Graph, {NodeOptions} from './Graph'\nimport {Renderer} from './Renderer'\n\nexport interface FlowChartOptions {\n  direction: 'LR' | 'TB' | 'BT' | 'RL'\n}\n\nexport default class FlowChart {\n  options: FlowChartOptions = {\n    direction: 'LR'\n  }\n  elements: FlowElement[] = []\n\n  constructor(options?: FlowChartOptions) {\n    this.options = Object.assign(this.options, options)\n  }\n\n  addElement(id: string, options?: NodeOptions) {\n    console.log('add element')\n    const el = new FlowElement(id, options)\n    this.elements.push(el)\n    return el\n  }\n\n  destroy() {\n    this.elements.forEach(element => {\n      element.unregister()\n    })\n  }\n\n  render(element: HTMLElement) {\n    const svg = select(element)\n      .append('svg')\n      .attr('id', 'f' + element.id)\n      .attr('xmlns', 'http://www.w3.org/2000/svg')\n      .attr('width', 1000)\n      .attr('height', 600)\n\n    const svgGroup = svg.append('g')\n\n    // Create the input graph\n    const g = new Graph({\n      multigraph: true,\n      compound: true\n    }).setGraph({\n      rankdir: this.options.direction,\n      marginx: 20,\n      marginy: 20\n    })\n    // .setDefaultEdgeLabel(function () {\n    //   return {}\n    // })\n\n    // first create all nodes\n    for (const i in this.elements) {\n      const el = this.elements[i]\n      const elData: NodeOptions = {\n        label: el.id,\n        rx: 5,\n        ry: 5\n      }\n\n      if (el.options?.label) {\n        elData.label = el.options.label\n      }\n      g.setNode(el.id, elData)\n\n      console.log('create edges', el.edges)\n\n      // now create all edges\n      for (const k in el.edges) {\n        const edge = el.edges[k]\n        const edgeData: FlowElementEdgeOptions = {}\n\n        if (edge.options && edge.options.label) {\n          edgeData.label = edge.options.label\n        }\n\n        g.setEdge(el.id, edge.otherId, edgeData)\n      }\n    }\n\n    const renderer = new Renderer(g)\n\n    const selector = `#f${element.id} g`\n    const e = document.querySelector(selector)\n\n    if (!e) {\n      throw new Error(`Could not found element with selector '${selector}'`)\n    }\n\n    renderer.render(e)\n    const svgElement = document.getElementById('f' + element.id)\n\n    // now add the listeners after render\n    // e.selectAll('g.node')\n    //   .each(function(v) {\n    //     // get the flow element from the id\n    //     const el = FlowElement.getById(v as string)\n\n    //     if (!el) {\n    //       throw new Error('Element with id ' + v + ' is not defined!')\n    //     }\n\n    //     const d3Node = select(this)\n\n    //     // now loop all listeners\n    //     for (const listener of el.listeners) {\n    //       d3Node.on(listener.event, listener.callback)\n    //     }\n    //   })\n\n    if (!svgElement) {\n      throw new Error('svgElement is null!')\n    }\n\n    const groupElement = svgElement.querySelector('g')\n\n    if (!groupElement) {\n      throw new Error('groupElement is null!')\n    }\n\n    svgElement.setAttribute('width', (groupElement.getBoundingClientRect().width + 40).toString())\n    svgElement.setAttribute('height', (groupElement.getBoundingClientRect().height + 40).toString())\n  }\n}\n"],"names":[],"mappings":"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"}